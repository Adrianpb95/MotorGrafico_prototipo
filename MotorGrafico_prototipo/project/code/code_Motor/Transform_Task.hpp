/*
ADRIAN PONCE BALSEIRO
ESNE G4.3 DDVJ
adrianpb95@gmail.com
3 / 07 / 2018
*/

#ifndef TRANSFORM_TASK_HEADER
#define TRANSFORM_TASK_HEADER

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "Task.hpp"

////////////////////////////////////////////////////////////
// NameSpaces
////////////////////////////////////////////////////////////
namespace example
{
	class Transform_Task : public Task
	{

		////////////////////////////////////////////////////////////
		// Declaracion de funciones			
		////////////////////////////////////////////////////////////

	public:

		////////////////////////////////////////////////////////////
		/// \brief	Constructor de Transform_Task:	Inicializa sus componentes
		///	@param	scene				Escena a la que pertenece
		///	@param	priority			Prioridad de la tarea
		///	@param	finished			Tarea finalizada (?)
		////////////////////////////////////////////////////////////
		Transform_Task(Scene * scene, int priority = 0, bool finished = false);

		////////////////////////////////////////////////////////////
		/// \brief	Inicializacion de la tarea: Inicializa los componentes de tipo transform
		////////////////////////////////////////////////////////////
		void initialize() override;
		////////////////////////////////////////////////////////////
		/// \brief	Ejecucion de la tarea: Ejecuta los componentes de tipo transform --> actualizan los transform de cada mesh
		////////////////////////////////////////////////////////////
		void run() override;
		////////////////////////////////////////////////////////////
		/// \brief	Finalizacion de la tarea: Finaliza los componentes de tipo transform
		////////////////////////////////////////////////////////////
		void finalize() override;

	};
}

#endif