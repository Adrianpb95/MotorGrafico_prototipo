/*
ADRIAN PONCE BALSEIRO
ESNE G4.3 DDVJ
adrianpb95@gmail.com
3 / 07 / 2018
*/

#ifndef MODULE_HEADER
#define MODULE_HEADER

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "Task.hpp"

////////////////////////////////////////////////////////////
// NameSpaces
////////////////////////////////////////////////////////////
namespace example
{
	class Module
	{
		////////////////////////////////////////////////////////////
		// Declaracion de variables			
		////////////////////////////////////////////////////////////

	private:

		Scene * parent;				///<Padre del modulo (Escena)


		////////////////////////////////////////////////////////////
		// Declaracion de funciones			
		////////////////////////////////////////////////////////////

	public:

		////////////////////////////////////////////////////////////
		/// \brief	Constructor de Module:	Crea el modulo y registra la escena como su padre
		///	@param	scene					Escena a la que pertenece
		////////////////////////////////////////////////////////////
		Module(Scene * scene) : parent(scene) {}

		////////////////////////////////////////////////////////////
		/// \brief	Destructor de Module
		////////////////////////////////////////////////////////////
		~Module() {}

		////////////////////////////////////////////////////////////
		/// \brief	Crea un componente del tipo de modulo con informacion de un xml
		///	@param	entity			Entidad a la que añadirle el componente
		///	@param	node			Nodo desde el que empezar a leer en el xml
		////////////////////////////////////////////////////////////
		virtual void create_component(Entity * entity, xml_node<> * node) = 0;

		////////////////////////////////////////////////////////////
		/// \brief	GETTER de la tarea perteneciente al modulo
		////////////////////////////////////////////////////////////
		virtual Task * getTask() = 0;
	};
}
#endif