/*
ADRIAN PONCE BALSEIRO
ESNE G4.3 DDVJ
adrianpb95@gmail.com
3 / 07 / 2018
*/

#ifndef	EVENT_UPDATER_HEADER
#define EVENT_UPDATER_HEADER

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "Transform_Component.hpp"
#include "Render_Component.hpp"
#include "Scene.hpp"
#include "Dispatcher.hpp"

////////////////////////////////////////////////////////////
// NameSpaces
////////////////////////////////////////////////////////////
namespace example
{
	class Event_Updater : public Dispatcher::Listener
	{

		////////////////////////////////////////////////////////////
		// Declaracion de variables			
		////////////////////////////////////////////////////////////

	private:

		Scene * scene;							///<Escena global
		Transform_Component * player;			///<Puntero al player (robot)
		Render_Component * mesh;				///<Puntero a las meshes de la escena (cajas)
		int num;								///<Num auxiliar para contar las cajas recogidas


		////////////////////////////////////////////////////////////
		// Declaracion de funciones			
		////////////////////////////////////////////////////////////

	public:

		////////////////////////////////////////////////////////////
		/// \brief	Constructor de Event_Updater: Añade a la escena los listeners de movimiento de jugador
		///	@param	scene		Escena a la que pertenece
		////////////////////////////////////////////////////////////
		Event_Updater(Scene * scene);

		////////////////////////////////////////////////////////////
		/// \brief	Recibe un mensaje y lleva a cabo un accion a raiz de este
		///	@param	msg		Mensaje recibido
		////////////////////////////////////////////////////////////
		void handle(Message & msg);

		////////////////////////////////////////////////////////////
		/// \brief	Actualiza la mision que se esta llevando a cabo
		////////////////////////////////////////////////////////////
		void quest_update();
	};
}
#endif
