/*
ADRIAN PONCE BALSEIRO
ESNE G4.3 DDVJ
adrianpb95@gmail.com
3 / 07 / 2018
*/

#ifndef TRANSFORM_MODULE_HEADER
#define TRANSFORM_MODULE_HEADER

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "Module.hpp"
#include "Transform_Task.hpp"

////////////////////////////////////////////////////////////
// NameSpaces
////////////////////////////////////////////////////////////
namespace example
{
	class Transform_Module : public Module
	{

		////////////////////////////////////////////////////////////
		// Declaracion de variables			
		////////////////////////////////////////////////////////////

	private:

		Transform_Task transform_task;			///<Tarea de tipo transform perteneciente al modulo


		////////////////////////////////////////////////////////////
		// Declaracion de funciones			
		////////////////////////////////////////////////////////////

	public:
		
		////////////////////////////////////////////////////////////
		/// \brief	Constructor de Transform_Module:	Modulo de tipo transform
		///	@param	scene			Escena a la que pertenece
		////////////////////////////////////////////////////////////
		Transform_Module(Scene * scene) : Module(scene), transform_task(scene) {}

		////////////////////////////////////////////////////////////
		/// \brief	Destructor de Transform_Module
		////////////////////////////////////////////////////////////
		~Transform_Module() {}	
	
		////////////////////////////////////////////////////////////
		/// \brief	Crea un Modulo de tipo transform
		///	@param	scene			Escena a la que pertenece
		////////////////////////////////////////////////////////////
		static shared_ptr<Module> create(Scene * scene)
		{
			return shared_ptr<Module>(new Transform_Module(scene));
		}

		////////////////////////////////////////////////////////////
		/// \brief	GETTER de la tarea perteneciente al modulo
		////////////////////////////////////////////////////////////
		Task * getTask() override
		{
			return &transform_task;
		}
	
		////////////////////////////////////////////////////////////
		/// \brief	Crea un componente de tipo transform con informacion de un xml
		///	@param	entity			Entidad a la que añadirle el componente
		///	@param	render_node		Nodo del transform desde el que empezar a leer en el xml
		////////////////////////////////////////////////////////////
		void create_component(Entity * entity, xml_node<> * transform_node) override;
	};
}

#endif
