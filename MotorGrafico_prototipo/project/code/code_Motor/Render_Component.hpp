/*
ADRIAN PONCE BALSEIRO
ESNE G4.3 DDVJ
adrianpb95@gmail.com
3 / 07 / 2018
*/

#ifndef MESH_COMPONENT_HEADER
#define MESH_COMPONENT_HEADER

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "Mesh.hpp"
#include "Component.hpp"
#include "Entity.hpp"

////////////////////////////////////////////////////////////
// NameSpaces
////////////////////////////////////////////////////////////
namespace example
{
	class Render_Component : public Component
	{

		////////////////////////////////////////////////////////////
		// Declaracion de variables			
		////////////////////////////////////////////////////////////

	private:

		shared_ptr<Mesh> mesh;				///<Malla a renderizar
		bool child_b = false;				///<Bool: Esta malla es hija de otra ? En tal caso, el padre se encarga de renderizarla, y no la task


		////////////////////////////////////////////////////////////
		// Declaracion de funciones			
		////////////////////////////////////////////////////////////

	public:
		
		////////////////////////////////////////////////////////////
		/// \brief	Constructor de Render_Component: Se crea la malla a renderizar y se guarda su entidad padre
		///	@param	entity		Entidad padre
		////////////////////////////////////////////////////////////
		Render_Component(Entity * entity) : Component(entity), mesh(new Mesh()) {}

		////////////////////////////////////////////////////////////
		/// \brief	GETTER de child_b: La malla es hija de otra (?)
		////////////////////////////////////////////////////////////
		bool is_child()
		{
			return child_b;
		}

		////////////////////////////////////////////////////////////
		/// \brief	GETTER de la mesh a renderizar
		////////////////////////////////////////////////////////////
		shared_ptr<Mesh> & get_mesh()
		{
			return mesh;
		}	

		////////////////////////////////////////////////////////////
		/// \brief	Inicializacion del componente: Se setea la malla a un transform para poder manejarla
		////////////////////////////////////////////////////////////
		void initialize() override;
		////////////////////////////////////////////////////////////
		/// \brief	Ejecucion del componente
		////////////////////////////////////////////////////////////
		void run() override {}
		////////////////////////////////////////////////////////////
		/// \brief	Finalizacion del componente
		////////////////////////////////////////////////////////////
		void finalize() override {}
		////////////////////////////////////////////////////////////
		/// \brief	Lectura de los atributos del componente desde xml
		///	@param	mesh_node		Nodo del componente en el xml
		///	@param	entity			Entidad padre
		////////////////////////////////////////////////////////////
		void parse(xml_node<> * mesh_node, Entity * entity) override;
	};
}

#endif