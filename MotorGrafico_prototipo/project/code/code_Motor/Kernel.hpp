/*
ADRIAN PONCE BALSEIRO
ESNE G4.3 DDVJ
adrianpb95@gmail.com
3 / 07 / 2018
*/

#ifndef KERNEL_HEADER
#define KERNEL_HEADER

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "Task.hpp"

////////////////////////////////////////////////////////////
// NameSpaces
////////////////////////////////////////////////////////////
namespace example
{
	class Kernel
	{

		////////////////////////////////////////////////////////////
		// Declaracion de variables			
		////////////////////////////////////////////////////////////

	private:

		list<Task *> tasks;				///<Lista de tareas a ejecutar en el kernel
		bool running;					///<Bool: El kernel esta en funcionamiento ?
		

		////////////////////////////////////////////////////////////
		// Declaracion de funciones			
		////////////////////////////////////////////////////////////

	public:

		////////////////////////////////////////////////////////////
		/// \brief	Constructor de Kernel
		////////////////////////////////////////////////////////////
		Kernel() 
		{ 
			running = true; 
		}

		////////////////////////////////////////////////////////////
		/// \brief	Destructor de Kernel
		////////////////////////////////////////////////////////////
		~Kernel()
		{
			tasks.clear();
		}	

		////////////////////////////////////////////////////////////
		/// \brief	Corta el funcionamiento del kernel
		////////////////////////////////////////////////////////////
		void stop()
		{
			running = false;
		}	
		
		////////////////////////////////////////////////////////////
		/// \brief	SETTER de tareas para el kernel. Además se ordenan por prioridad
		///	@param	task		Tarea a añadir al kernel
		////////////////////////////////////////////////////////////
		void add(Task & task)
		{
			tasks.push_back(&task);
			tasks.sort(compare);
		}

		////////////////////////////////////////////////////////////
		/// \brief	Inicializacion del kernel y todas sus tareas
		////////////////////////////////////////////////////////////
		void initialize();		
		////////////////////////////////////////////////////////////
		/// \brief	Ejecucion de cada una de las tareas mientras el kernel este activo
		////////////////////////////////////////////////////////////
		void execute();		
		////////////////////////////////////////////////////////////
		/// \brief	Finalizacion de cada una de las tareas cuando el kernel se desactiva
		////////////////////////////////////////////////////////////
		void finalize();

	private:

		////////////////////////////////////////////////////////////
		/// \brief	Se compara cada tarea por su prioridad al ordenarse
		////////////////////////////////////////////////////////////
		static bool compare(const Task * a, const Task * b)
		{
			return *a < *b;
		}
	};
}

#endif