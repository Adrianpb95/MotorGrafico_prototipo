/*
ADRIAN PONCE BALSEIRO
ESNE G4.3 DDVJ
adrianpb95@gmail.com
3 / 07 / 2018
*/

#ifndef ENTITY_HEADER
#define ENTITY_HEADER

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <map>
#include <string>
#include "Component.hpp"

////////////////////////////////////////////////////////////
// NameSpaces
////////////////////////////////////////////////////////////
using namespace std;
namespace example
{
	class Scene;
	class Entity
	{

		////////////////////////////////////////////////////////////
		// Declaracion de variables			
		////////////////////////////////////////////////////////////

	protected:

		Scene * parent;											///<Padre de la entidad (Escena)
		map <string, shared_ptr<Component>> components;			///<Mapa de todos los componentes de cada entidad


		////////////////////////////////////////////////////////////
		// Declaracion de funciones			
		////////////////////////////////////////////////////////////

	public:
		
		////////////////////////////////////////////////////////////
		/// \brief	Constructor de Entity:	Crea la entidad y registra la escena como su padre
		///	@param	scene					Escena a la que pertenece
		////////////////////////////////////////////////////////////
		Entity(Scene * scene);

		////////////////////////////////////////////////////////////
		/// \brief	Destructor de Component
		////////////////////////////////////////////////////////////
		~Entity();		

		////////////////////////////////////////////////////////////
		/// \brief	SETTER de un componente a la entidad
		///	@param	name		Nombre del componente a añadir
		///	@param	component	Puntero al componente
		////////////////////////////////////////////////////////////
		void add(const string & name, shared_ptr<Component> component)
		{
			components[name] = component;
		}

		////////////////////////////////////////////////////////////
		/// \brief	GETTER de un componente de la entidad
		///	@param	name	Nombre del componente a obtener
		////////////////////////////////////////////////////////////
		shared_ptr<Component> get_component(const string & name)
		{
			return components[name];
		}
		
		////////////////////////////////////////////////////////////
		/// \brief	GETTER del padre
		////////////////////////////////////////////////////////////
		Scene * get_parent() 
		{
			return parent;
		}


	};
}

#endif